

 
Department of Electrical and Computer Engineering 
Model Driven Software Engineering
(COEN 6312)
Deliverable 3
Team – Byteme 
Submitted by
Eswar Reddy Chintalapudi –     	26822797
Renny Kochubaby –                  	27436041
Ronak Prajapati –                       	27725973
Muhammad Fahad –                  	27195338
 
Submitted to
Prof Abdelwahab Hamou-Lhadj
Korosh Sabor Koochekian (Teaching Assistant)

 
1.	Class Diagram

 A class diagram in the Unified Modeling Language (UML) is a type of static structure diagram that describes the structure of a system by showing the system's classes, their attributes, operations (or methods), and the relationships among objects.

The class diagram is the main building block of object-oriented modelling. It is used both for general conceptual modelling of the systematics of the application, and for detailed modelling translating the models into programming code. The classes in a class diagram represent both the main elements, interactions in the application, and the classes to be programmed.

A class has three compartments. 
●	The top compartment contains the name of the class. It is printed in bold and centered, and the first letter is capitalized.
●	The middle compartment contains the attributes of the class. They are left aligned and the first letter is lowercase.
●	The bottom compartment contains the operations the class can execute. They are also left aligned and the first letter is lowercase.
In the design of a system, a number of classes are identified and grouped together in a class diagram that helps to determine the static relations between them. With detailed modelling, the classes of the conceptual design are often split into a number of subclasses.



The class diagram for web based real estate system is as follows:  

Seller:
Seller plays a crucial role in this web based real estate system. Seller posts an advertisement of the property with all clear description about the property like property type, property size, price, and property region. 

Attributes: 
●	seller_id: The seller id should be unique. It is because to differentiate each seller from the other sellers. 
●	Password: the password of the user
●	seller_name: Name of the seller to identify and register by the admin.
●	email_id: The email address of the seller on which the user will receive all the system alerts, notification and updates.
●	phone_number: The phone number of the user to get alerts, notifications and updates through SMS.
●	address: The address of the seller holding the account. 

Methods:
●	postAnAdd(): Seller can post an advertisement with all property description. 
●	manageAnAdd(): seller can edit or delete property whenever he wants. He will get updates whenever he deletes the property.
●	acceptOffer(): After posting an advertisement, seller will may receive many number of offers to buy that property. Seller can accept best offer by this method.
●	createPassword():for creating password for the user
●	changePassword():in case the user wants to change password


Buyer: 
Buyer can be any individual who wants to make an offer and buy the property. He wants to search the property easily and fast with minimal efforts. For that we use the best methods to get the search result fast and efficient.

Attributes:
●	buyer_id: The buyer id should be unique. It is because to differentiate each buyer from the other buyers.
●	Password: the passkey for buyer
●	buyer_name: Name of the buyer to identify and register by the admin.
●	email_id: The email address of the buyer on which the user will receive all the system alerts, notification and updates.
●	phone_number: The phone number of the buyer to get alerts, notifications and updates through SMS.

Methods:
●	searchProperty(): Buyer wants to search a property based on his requirements.
●	makeAnOffer(): when buyer wants to buy that property then he can make an offer by using this method. 
●	createPassword():for creating password for the user
●	changePassword():in case the user wants to change password


Property: -
Property is thing which buyer and seller want to sell in website. The property can be any house, apartment, condos or other. The user can either sell, buy or rent this property. They can set a criteria of property. The user can receive the notification when someone is interested in property.

Attributes: -
●	SellerId: The seller id is unique. This seller id is help to define the property of particular’s.
●	Size: The size is help to define the property as per the size of that property.
●	Address: The address of the property is the thing by which user know the place of that property which also unique.
●	DateListed: The date listed contains of the date of the property which user post for selling that in website.
●	Prize: the actaul prize of the property
●	PropertyID: this is a unique ID generated by the system as a tag for the property
 
Methods: - 
●	sortByPrice(): To make the search process easy buyer can sort all the properties by price. It can be from lower to higher or higher to lower.
●	sortByDate(): Buyer can sort all the properties by date that property posted. It can be from oldest to latest and latest to oldest.
●	soldBySize(): property can refine as per their size.

Make Offer:-
In make offer the user who want to buy or sell the property can make an offer for the property in which they interested to buy from other user in website. Make offer can help the seller that someone is interested in their property.

Attributes: -
●	Property Id: - property id can be unique for all , from which we can easily identify all property.
●	Buyer Id:- the buyer which is unique to the buyer who is making the offer
●	Date:- this is the date on which the offer is being made
●	Price:- this is the price the buyer gives for the property in contrast to  the price given by the seller in case of no prize given by buyer 

Methods:-
●	sendEmailNotification:- both buyer and seller receives notification in case a offer is made

Accept Offer
when any buyer want to buy any property they send an offer to the seller then the seller may accept an offer or reject as per their criteria. If user Accept Offer means they want to sell their property to that user and deals come true.  
Attributes: -
●	PropertyID: this will be the ID of the property on which the offer was originally made
●	SellerID: the ID of the seller to whom the property belong to
●	BuyerID: this is the ID of the buyer who orignally made the offer and is the one to whom the property is being sold to
●	ExpiresDate: the offer will remain till 3 days after which it will expire if the seller does not accept it
●	DateOffered: this is the date the offer was orignally made
Methods:-
●	emailNotification:- in case of acceptance an email is generated to buyer that his offer is accepted
Alerts
These are notification generated in case the admin deletes an add or makes changes to account of buyer and seller.
Attributes:-
●	Status: a single character to show if the property is sold or still available
●	PropertyID: the ID of the property for which the alert is generated
Methods:-
●	sendAlert(): alert messages to both users whenever some changes are made by the admin.
Administrator
The administrator take cares of all the operation involved in the real estate management program. Its adminsitrator job to authenticate properly both the seller and buyer. Admin will have option to delete the property in case of false or invalid posting of information. Send alerts to seller or buyer telling them of different errors and development related to property dealings.
Attributes:-
UserID: The main administrator id. 
PropertyID: the ID of the property whom the admin will manage
SellerID: the ID of the seller to whom the property belongs to
Methods:-
manageProperty(): through this method admin can make changes to the property 
manageBuyer(): manage the buyer account delete in case the buyer is a spamer etc
manageSeller(): manage the seller account his information that should verify his being a legitimate seller
registerUser():	admin can add users seller and buyers through this method. This method make sures that the user is authenticated
addProperty(): admin can add property 
sendAlert(): generate alerts to user keeping them uptodate with their property dealings








2.	UML class diagram for the online real estate system



 







3.	OCL Expressions


1.	There must be at least one property for the seller.

Context Seller
inv: self.R1notEmpty()

2.	Buyer can’t make an offer more than 10 properties.
Context Buyer 
inv: self. R4size () <=10

3.	Seller can’t post same property again.
Context Seller
inv: selft.R1forAll(P1.P2:property|P1<>P2 implies P1.property<>p2.property)

4.	All the sellers must be unique.
Context Seller
inv: self.seller forAll(S1.S2:seller|S1<>S2 implies s1.seller<>s2.seller)

5.	Administrator notifies when property is sold.
Context Administrator 
inv: sel.R11.sendAlertsif( sellf.orderstatus==”sold”)
{
return 1
}

6.	Seller can accept the offer before the expired date.
Context Seller
inv: Self.R10(DO: dateoffered, ED: expireddate | implies DO≤ED)

7.	Buyer should have valid login and password details to login to the System.
Context Buyer 
inv: self.isIssuedimplies(self.BuyerID and self.password isnotEmpty() )

8.	Seller should have valid login and password details to login to the System.
Context Seller 
inv: self.isIssuedimplies(self.sellerID and self.password isnotEmpty() )

9.	Seller can accept only one property
Context Seller
inv: self.propertynotEmpty()
Implies self.Acceptoffer.propertysize==1

10.	Register seller to the system only if he/she is not registered.
ContextAdministrator::Register (sellerId:user)
Pre:self.R5.sellerIdexcludes (self.R11.sellerId)
Post:self.R5.sellerIdincludes (self.R11.sellerId)

11.	Register Buyer to the system only if he/she is not registered.
ContextAdministrator::Register (BuyerId:user)
Pre:self.R6.buyerIdexcludes (self.R11.buyerId)
Post:self.R6.buyerIdincludes (self.R11.buyerId)
4.	References

1)	https://en.wikipedia.org/wiki/Class_diagram
2)	https://eclipse.org/papyrus/
3)	http://www.cs.toronto.edu/~jm/340S/PDF2/OCL.pdf
4)	http://www.tutorialspoint.com/uml/uml_class_diagram.htm
5)	http://dresden-ocl.sourceforge.net/usage/ocl22sql/modelexplanation.html
6)	http://www.cs.toronto.edu/~jm/340S/PDF2/OCL.pdf
7)	http://www.slideshare.net/jcabot/ocl-tutorial
8)	http://homepage.cs.uiowa.edu/~tinelli/classes/181/Spring08/Notes/05-OCL-intro.pdf


